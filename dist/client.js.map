{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvzaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-legend-plugin/./client/legend/EditorEvents.js","webpack://camunda-modeler-legend-plugin/./client/legend/LegendPlugin.js","webpack://camunda-modeler-legend-plugin/./client/legend/Store.js","webpack://camunda-modeler-legend-plugin/./client/legend/constants.js","webpack://camunda-modeler-legend-plugin/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-legend-plugin/./node_modules/camunda-modeler-plugin-helpers/react.js","webpack://camunda-modeler-legend-plugin/./node_modules/domify/index.js","webpack://camunda-modeler-legend-plugin/webpack/bootstrap","webpack://camunda-modeler-legend-plugin/webpack/runtime/compat get default export","webpack://camunda-modeler-legend-plugin/webpack/runtime/define property getters","webpack://camunda-modeler-legend-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-legend-plugin/webpack/runtime/make namespace object","webpack://camunda-modeler-legend-plugin/./client/index.js"],"sourcesContent":["import { PureComponent } from 'camunda-modeler-plugin-helpers/react';\r\nimport { EVENTS } from './constants';\r\n\r\nexport default class EditorEvents extends PureComponent {\r\n  modelers = new Map();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.subscribe = props.subscribe;\r\n    this.onModelerCreate();\r\n    this.onTabSave();\r\n  }\r\n\r\n  onModelerCreate() {\r\n    this.subscribe('bpmn.modeler.created', (event) => {\r\n      const { tab, modeler } = event;\r\n      this.modelers.set(tab.id, new ModelerData(modeler, tab.id));\r\n    });\r\n  }\r\n\r\n  onTabSave() {\r\n    this.subscribe('tab.saved', ({ tab }) => {\r\n      const modelerData = this.modelers.get(tab.id);\r\n      if (modelerData) {\r\n        const { eventBus, definitionId } = modelerData;\r\n        eventBus.fire(EVENTS.TAB_SAVE, { id: definitionId });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nclass ModelerData {\r\n  constructor(modeler, tabId) {\r\n    this.tabId = tabId;\r\n    this.modeler = modeler;\r\n    this.eventBus = modeler.get('eventBus');\r\n    this.fireInitEvent();\r\n  }\r\n\r\n  get definitionId() {\r\n    return this.modeler._definitions.id;\r\n  }\r\n\r\n  fireInitEvent() {\r\n    const interval = setInterval(() => {\r\n      if (this.modeler._definitions) {\r\n        clearInterval(interval);\r\n        this.eventBus.fire(EVENTS.MODELER_LOADED, { id: this.definitionId });\r\n      }\r\n    }, 100);\r\n  }\r\n}","import domify from 'domify';\r\nimport { LegendPluginStore } from './Store'\r\nimport { EVENTS } from './constants';\r\n\r\nconst PLUGIN_NAME = 'LegendPlugin';\r\n\r\nclass LegendPlugin {\r\n  colors = new Map();\r\n  legendElement = null;\r\n  store = new LegendPluginStore();\r\n\r\n  constructor(canvas, eventBus, elementRegistry) {\r\n    this.elementRegistry = elementRegistry;\r\n    this.container = canvas.getContainer().parentNode;\r\n    this.eventBus = eventBus;\r\n    this.legendElement = new LegendElement(this.colors, this.container);\r\n    this.onElementChange();\r\n    this.onElementCreation();\r\n    this.onTabSave();\r\n    this.onModelerLoaded();\r\n  }\r\n\r\n  onElementCreation() {\r\n    this.eventBus.on(['shape.added', 'connection.added'], (event) => {\r\n      this.addColor(event.element);\r\n    });\r\n  }\r\n\r\n  onElementChange() {\r\n    this.eventBus.on(['element.changed', 'connection.changed'], (event) => {\r\n      if (event.element.di?.stroke) {\r\n        this.addColor(event.element);\r\n      }\r\n      this.clearColors();\r\n    });\r\n  }\r\n\r\n  onTabSave() {\r\n    this.eventBus.on(EVENTS.TAB_SAVE, ({ id }) => {\r\n      if (this.colors.size) {\r\n        const colorData = [...this.colors.entries()].reduce((data, [key, palleteColor]) => {\r\n          data[key] = palleteColor.model;\r\n          return data;\r\n        }, {});\r\n        this.store.save(id, colorData);\r\n      }\r\n    });\r\n  }\r\n\r\n  onModelerLoaded() {\r\n    this.eventBus.on(EVENTS.MODELER_LOADED, ({ id }) => {\r\n      const data = this.store.get(id);\r\n      if (data) {\r\n        Object.entries(data).forEach(([key, { fill, stroke, label, isElement }]) => {\r\n          this.colors.set(key, new PaletteColor(label, isElement, stroke, fill));\r\n        });\r\n        this.updateLegend();\r\n      }\r\n    });\r\n  }\r\n\r\n  addColor(element) {\r\n    const { stroke } = element.di;\r\n    if (stroke) {\r\n      this.addPaletteColor(element);\r\n    }\r\n    this.updateLegend();\r\n  }\r\n\r\n  clearColors() {\r\n    const exist = [];\r\n    this.elementRegistry.forEach((element) => {\r\n      const { stroke, fill } = element.di;\r\n      if (stroke) {\r\n        const id = PaletteColor.createId(stroke, fill);\r\n        exist.push(id);\r\n        // this.addPaletteColor(element);\r\n      }\r\n    });\r\n    [...this.colors.keys()]\r\n      .filter((key) => !exist.includes(key))\r\n      .forEach((key) => this.colors.delete(key));\r\n    this.updateLegend();\r\n  }\r\n\r\n  addPaletteColor(element) {\r\n    const { stroke, fill } = element.di;\r\n    const id = PaletteColor.createId(stroke, fill);\r\n    if (this.colors.has(id)) return;\r\n    const label = `System ${this.colors.size + 1}`;\r\n    if (this.isConnection(element)) {\r\n      this.colors.set(id, new PaletteColor(label, false, stroke));\r\n    } else {\r\n      this.colors.set(id, new PaletteColor(label, true, stroke, fill));\r\n    }\r\n  }\r\n\r\n  updateLegend() {\r\n    if (this.legendElement) {\r\n      // this.legendElement.remove();\r\n      this.legendElement.update();\r\n    }\r\n    // this.legendElement.create();\r\n  }\r\n\r\n  isConnection(element) {\r\n    return !!element.waypoints;\r\n  }\r\n}\r\n\r\nLegendPlugin.$inject = [\r\n  'canvas',\r\n  'eventBus',\r\n  'elementRegistry',\r\n]\r\n\r\nclass PaletteColor {\r\n  constructor(label, isElement, stroke, fill) {\r\n    this.label = label || 'System';\r\n    this.isElement = isElement;\r\n    this.stroke = stroke;\r\n    this.fill = fill;\r\n  }\r\n\r\n  get id() {\r\n    return PaletteColor.createId(this.stroke, this.fill);\r\n  }\r\n\r\n  get model() {\r\n    return { label: this.label, isElement: this.isElement, stroke: this.stroke, fill: this.fill };\r\n  }\r\n\r\n  get style() {\r\n    if (!this.isElement) return `background-color: ${this.stroke};`;\r\n    return `background-color: ${this.fill};`;\r\n  }\r\n\r\n  static createId(stroke, fill) {\r\n    const fillId = (fill || '').replace('#', '');\r\n    const strokeId = stroke.replace('#', '');\r\n    return `color_${strokeId}_${fillId}`;\r\n  }\r\n}\r\n\r\nclass LegendElement {\r\n  element = null;\r\n  listenets = new Map();\r\n  dragParams = null;\r\n  content = null;\r\n\r\n  constructor(colors, container) {\r\n    this.colors = colors;\r\n    this.container = container;\r\n    this.onContainerMousemove();\r\n  }\r\n\r\n  onContainerMousemove() {\r\n    this.container.addEventListener('mousemove', (event) => {\r\n      if (this.dragParams && this.element) {\r\n        const { x, y } = event;\r\n        const { dx, dy } = this.dragParams;\r\n        this.element.style.left = `${x - dx}px`;\r\n        this.element.style.top = `${y - 28 - dy}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  get dragBar() {\r\n    return this.element.querySelector('.drag-bar');\r\n  }\r\n\r\n  update() {\r\n    if (!this.element) {\r\n      this.createLegendPanel();\r\n      this.content = new LegendContent(this.colors, this.element);\r\n    }\r\n    this.content.destroyContent();\r\n    this.content.createContent();\r\n    // this.removeLegendItems();\r\n    // this.createLegendItems();\r\n  }\r\n\r\n  createLegendPanel() {\r\n    const panel = `<div class=\"legend\">\r\n      <div class=\"drag-bar\"></div>\r\n    </div>`\r\n    this.element = domify(panel);\r\n    this.container.appendChild(this.element);\r\n    this.draggable();\r\n  }\r\n\r\n  // createLegendItems() {\r\n  //   const content = [...this.colors.values()].map((palleteColor) => {\r\n  //     return `<div class=\"legend-item\">\r\n  //         <div class=\"legend-item-color\" style=\"${palleteColor.style}\"></div>\r\n  //         <input type=\"text\" id=\"${palleteColor.id}\" class=\"legend-item-input\" value=\"${palleteColor.label}\" />\r\n  //         <div class=\"legend-item-action\">\r\n  //           <button class=\"arrow-btn up\" title=\"Move Up\"></button>\r\n  //           <button class=\"arrow-btn down\" title=\"Move Down\"></button>\r\n  //         </div>\r\n  //       </div>`;\r\n  //   }).join('\\n');\r\n  //   this.element.appendChild(domify(content));\r\n  //   this.addListeners();\r\n  //   this.moveItems();\r\n  // }\r\n\r\n  //\r\n\r\n  // moveItems() {\r\n  //   this.element.querySelectorAll('.legend-item').forEach((item, i, items) => {\r\n  //     item.querySelector('button.up').addEventListener('click', (event) => {\r\n  //       const index = [...this.element.querySelectorAll('.legend-item').values()].indexOf(item);\r\n  //       if (index === 0) {\r\n  //         this.element.appendChild(item);\r\n  //       } else {\r\n  //         const swapEl = this.element.querySelectorAll('.legend-item').item(index - 1);\r\n  //         this.element.insertBefore(item, swapEl);\r\n  //       }\r\n  //     });\r\n\r\n  //     item.querySelector('button.down').addEventListener('click', (event) => {\r\n  //       const index = [...this.element.querySelectorAll('.legend-item').values()].indexOf(item);\r\n  //       if (index === items.length - 1) {\r\n  //         const firstEl = this.element.querySelectorAll('.legend-item').item(0);\r\n  //         this.element.insertBefore(item, firstEl);\r\n  //       } else {\r\n  //         const swapEl = this.element.querySelectorAll('.legend-item').item(index + 1);\r\n  //         this.element.insertBefore(swapEl, item);\r\n  //       }\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  //\r\n\r\n  // removeLegendItems() {\r\n  //   this.removeListeners();\r\n  //   this.element.querySelectorAll('.legend-item').forEach((el) => {\r\n  //     this.element.removeChild(el);\r\n  //   });\r\n  // }\r\n\r\n  remove() {\r\n    if (this.element) {\r\n      // this.removeListeners();\r\n      this.content?.destroyContent();\r\n      this.element.removeEventListener('mouseup', this.onMouseup);\r\n      this.dragBar?.removeEventListener('mousedown', this.onMousedown);\r\n      this.container.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  // addListeners() {\r\n  //   [...this.colors.keys()].forEach((key) => {\r\n  //     const cb = ({ target }) => this.colors.get(key).label = target.value;\r\n  //     this.listenets.set(key, cb);\r\n  //     this.element.querySelector(`#${key}`).addEventListener('blur', cb);\r\n  //   });\r\n  // }\r\n\r\n  // removeListeners() {\r\n  //   [...this.listenets.keys()].forEach((key) => {\r\n  //     this.element.querySelector(`#${key}`).removeEventListener('blur', this.listenets.get(key));\r\n  //   });\r\n  //   this.listenets.clear()\r\n  // }\r\n\r\n  draggable() {\r\n    this.dragBar?.addEventListener('mousedown', this.onMousedown);\r\n    this.element.addEventListener('mouseup', this.onMouseup);\r\n  }\r\n\r\n  onMousedown = (event) => {\r\n    const { offsetX, offsetY } = event;\r\n    this.dragParams = { dx: offsetX, dy: offsetY };\r\n  }\r\n\r\n  onMouseup = () => {\r\n    this.dragParams = null;\r\n  }\r\n}\r\n\r\nclass LegendContent {\r\n  /*\r\n    in the array: [1, 2, 3]\r\n    on UI: 1\r\n           2\r\n           3\r\n  */\r\n  items = [];\r\n\r\n  constructor(colors, legend) {\r\n    this.colors = colors;\r\n    this.parent = legend;\r\n  }\r\n\r\n  createContent() {\r\n    if (!this.parent) throw new Error('Creating content before parend init!');\r\n    this.items = [...this.colors.values()].map((color) => new LegendItem(color, this.onMove, this.onRemove));\r\n    this.items.forEach(({ element }) => this.parent.appendChild(element));\r\n  }\r\n\r\n  destroyContent() {\r\n    this.items.forEach((item) => {\r\n      item.destoy();\r\n      this.parent.removeChild(item.element);\r\n    });\r\n    this.items = [];\r\n  }\r\n\r\n  onRemove = (item) => {\r\n    const index = this.items.indexOf(item);\r\n    if (index > -1) {\r\n      this.parent.removeChild(item.element);\r\n      this.items.splice(index, 1);\r\n      this.colors.delete(item.color.id);\r\n    }\r\n  }\r\n\r\n  onMove = (direction, item, el) => {\r\n    if (direction === 'up') this.moveUp(item);\r\n    if (direction === 'down') this.moveDown(item);\r\n  }\r\n\r\n  moveUp(item) {\r\n    const index = this.items.indexOf(item);\r\n    if (index === 0) {\r\n      this.parent.appendChild(item.element);\r\n      this.swapItems(item, this.items.at(-1));\r\n    } else {\r\n      const itemToSwap = this.items.at(index - 1);\r\n      this.parent.insertBefore(item.element, itemToSwap.element);\r\n      this.swapItems(item, itemToSwap);\r\n    }\r\n  }\r\n\r\n  moveDown(item) {\r\n    const index = this.items.indexOf(item);\r\n    if (index === this.items.length - 1) {\r\n      this.parent.insertBefore(item.element, this.items.at(0).element);\r\n      this.swapItems(item, this.items.at(0));\r\n    } else {\r\n      const itemToSwap = this.items.at(index + 1);\r\n      this.parent.insertBefore(itemToSwap.element, item.element);\r\n      this.swapItems(item, itemToSwap);\r\n    }\r\n  }\r\n\r\n  swapItems(item, itemToSwap) {\r\n    const index = this.items.indexOf(item);\r\n    const swapIndex = this.items.indexOf(itemToSwap);\r\n    if ([index, swapIndex].includes(-1)) throw new Error('There is no such colors!');\r\n    this.items[swapIndex] = item;\r\n    this.items[index] = itemToSwap;\r\n  }\r\n}\r\n\r\nclass LegendItem {\r\n  constructor(palleteColor, onMove, onRemove) {\r\n    this.color = palleteColor;\r\n    this.element = domify(this.getHtml());\r\n    this.onMove = onMove;\r\n    this.onRemove = onRemove;\r\n    this.addListeners();\r\n  }\r\n\r\n  destoy() {\r\n    this.onMove = undefined;\r\n    this.onRemove = undefined;\r\n    this.removeEventListeners();\r\n  }\r\n\r\n  getHtml() {\r\n    return `<div class=\"legend-item\">\r\n    <div class=\"legend-item-color\" style=\"${this.color.style}\"></div>\r\n    <input type=\"text\" id=\"${this.color.id}\" class=\"legend-item-input\" value=\"${this.color.label}\" />\r\n    <div class=\"legend-item-action\">\r\n      <button class=\"arrow-btn up\" title=\"Move Up\"></button>\r\n      <button class=\"arrow-btn down\" title=\"Move Down\"></button>\r\n      <button class=\"cap-btn cap-action-btn text-red\" data-action=\"remove\" title=\"Remove\">&times;</button>\r\n    </div>\r\n  </div>`\r\n  }\r\n  // <button class=\"legend-item-menu-toggle\"></button>\r\n\r\n\r\n  //   <div class=\"legend-item-menu\">\r\n  //\r\n  // </div>\r\n\r\n  addListeners() {\r\n    this.element.querySelector(`#${this.color.id}`).addEventListener('blur', this.onBlur);\r\n    this.element.querySelector(`button.up`).addEventListener('click', this.onMoveUpBtnClick);\r\n    this.element.querySelector(`button.down`).addEventListener('click', this.onMoveDownBtnClick);\r\n    this.element.querySelector(`button[data-action=\"remove\"]`).addEventListener('click', this.onRemoveBtnClick);\r\n  }\r\n\r\n  removeEventListeners() {\r\n    this.element.querySelector(`#${this.color.id}`).removeEventListener('blur', this.onBlur);\r\n    this.element.querySelector(`button.up`).removeEventListener('click', this.onMoveUpBtnClick);\r\n    this.element.querySelector(`button.down`).removeEventListener('click', this.onMoveDownBtnClick);\r\n    this.element.querySelector(`button[data-action=\"remove\"]`).removeEventListener('click', this.onRemoveBtnClick);\r\n  }\r\n\r\n  onBlur = ({ target }) => {\r\n    this.color.label = target.value;\r\n  }\r\n\r\n  onMoveUpBtnClick = () => {\r\n    this.onMove('up', this, this.element);\r\n  }\r\n\r\n  onMoveDownBtnClick = () => {\r\n    this.onMove('down', this, this.element);\r\n  }\r\n\r\n  onRemoveBtnClick = () => {\r\n    this.onRemove(this);\r\n  }\r\n}\r\n\r\nexport default {\r\n  __init__: [PLUGIN_NAME],\r\n  [PLUGIN_NAME]: ['type', LegendPlugin]\r\n};\r\n","const STORE_KEY = 'LegendPluginStore';\r\n\r\nexport class LegendPluginStore {\r\n  store = {};\r\n\r\n  constructor() {\r\n    this.initStore();\r\n  }\r\n\r\n  initStore() {\r\n    this.store = JSON.parse(localStorage.getItem(STORE_KEY) || '{}');\r\n  }\r\n\r\n  save(id, legendModel) {\r\n    this.store[id] = legendModel;\r\n    localStorage.setItem(STORE_KEY, JSON.stringify(this.store));\r\n  }\r\n\r\n  remove(id) {\r\n    const { [id]: remove, ...rest } = this.store;\r\n    this.store = rest;\r\n    localStorage.setItem(STORE_KEY, JSON.stringify(this.store));\r\n  }\r\n\r\n  get(id) {\r\n    return this.store[id];\r\n  }\r\n}\r\n","export const EVENTS = {\r\n  TAB_SAVE: 'legendPlugin.tabSave',\r\n  MODELER_LOADED: 'legendPlugin.modelerLoaded',\r\n}","/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {Object} plugin\r\n * @param {String} type\r\n */\r\nexport function registerClientPlugin(plugin, type) {\r\n  var plugins = window.plugins || [];\r\n  window.plugins = plugins;\r\n\r\n  if (!plugin) {\r\n    throw new Error('plugin not specified');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new Error('type not specified');\r\n  }\r\n\r\n  plugins.push({\r\n    plugin: plugin,\r\n    type: type\r\n  });\r\n}\r\n\r\n/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {import('react').ComponentType} extension\r\n *\r\n * @example\r\n *\r\n * import MyExtensionComponent from './MyExtensionComponent';\r\n *\r\n * registerClientExtension(MyExtensionComponent);\r\n */\r\nexport function registerClientExtension(component) {\r\n  registerClientPlugin(component, 'client');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerPlatformBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerPlatformBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerCloudBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerCloudBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerCloudBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerPlatformBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerCloudBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerDmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerDmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerDmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerDmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const DmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\r\n * registerDmnJSPlugin(DmnJSModule, 'drd')\r\n */\r\nexport function registerDmnJSPlugin(module, components) {\r\n\r\n  if (!Array.isArray(components)) {\r\n    components = [ components ]\r\n  }\r\n\r\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \r\n}\r\n\r\n/**\r\n * Return the modeler directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getModelerDirectory() {\r\n  return window.getModelerDirectory();\r\n}\r\n\r\n/**\r\n * Return the modeler plugin directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getPluginsDirectory() {\r\n  return window.getPluginsDirectory();\r\n}","if (!window.react) {\r\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\r\n}\r\n\r\n/**\r\n * React object used by Camunda Modeler. Use it to create UI extension.\r\n *\r\n * @type {import('react')}\r\n */\r\nmodule.exports = window.react;","const wrapMap = {\n\tlegend: [1, '<fieldset>', '</fieldset>'],\n\ttr: [2, '<table><tbody>', '</tbody></table>'],\n\tcol: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n\t_default: [0, '', ''],\n};\n\nwrapMap.td\n= wrapMap.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nwrapMap.option\n= wrapMap.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nwrapMap.thead\n= wrapMap.tbody\n= wrapMap.colgroup\n= wrapMap.caption\n= wrapMap.tfoot = [1, '<table>', '</table>'];\n\nwrapMap.polyline\n= wrapMap.ellipse\n= wrapMap.polygon\n= wrapMap.circle\n= wrapMap.text\n= wrapMap.line\n= wrapMap.path\n= wrapMap.rect\n= wrapMap.g = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">', '</svg>'];\n\nfunction domify(htmlString, document = globalThis.document) {\n\tif (typeof htmlString !== 'string') {\n\t\tthrow new TypeError('String expected');\n\t}\n\n\t// Handle comment nodes\n\tconst commentMatch = /^<!--(.*?)-->$/s.exec(htmlString);\n\tif (commentMatch) {\n\t\treturn document.createComment(commentMatch[1]);\n\t}\n\n\tconst tagName = /<([\\w:]+)/.exec(htmlString)?.[1];\n\n\tif (!tagName) {\n\t\treturn document.createTextNode(htmlString);\n\t}\n\n\thtmlString = htmlString.trim();\n\n\t// Body support\n\tif (tagName === 'body') {\n\t\tconst element = document.createElement('html');\n\t\telement.innerHTML = htmlString;\n\t\tconst {lastChild} = element;\n\t\tlastChild.remove();\n\t\treturn lastChild;\n\t}\n\n\t// Wrap map\n\tlet [depth, prefix, suffix] = Object.hasOwn(wrapMap, tagName) ? wrapMap[tagName] : wrapMap._default;\n\tlet element = document.createElement('div');\n\telement.innerHTML = prefix + htmlString + suffix;\n\twhile (depth--) {\n\t\telement = element.lastChild;\n\t}\n\n\t// One element\n\tif (element.firstChild === element.lastChild) {\n\t\tconst {firstChild} = element;\n\t\tfirstChild.remove();\n\t\treturn firstChild;\n\t}\n\n\t// Several elements\n\tconst fragment = document.createDocumentFragment();\n\tfragment.append(...element.childNodes);\n\n\treturn fragment;\n}\n\nmodule.exports = domify;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBpmnJSPlugin, registerClientExtension } from 'camunda-modeler-plugin-helpers';\r\nimport LegendPlugin from './legend/LegendPlugin';\r\nimport EditorEvents from './legend/EditorEvents';\r\n\r\nregisterBpmnJSPlugin(LegendPlugin);\r\nregisterClientExtension(EditorEvents)\r\n"],"names":[],"sourceRoot":""}